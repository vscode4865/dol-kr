:: Widgets customTestroom widget [widget nobr]
<<widget "customTestroom">>
<br><br>
= custom test widget =
<br>
<<generate1>><<person1>>
hePost : <<hePost>><br>
he_ : <<he_>><br>
he_ rul: <<he_ rul>><br>
he_ rul "sep": <<he_ rul "sep">><br>
NPCname_ ul: <<NPCname_ ul>><br>
<<endevent>>
bodywriting_ "animal" : <<bodywriting_ "animal">><br>
bodywriting_ ul "animal" : <<bodywriting_ ul "animal">><br>
bodywriting_ 을 "animal" : <<bodywriting_ 을 "animal">><br>
bodywriting_ 를 "animal" : <<bodywriting_ 를 "animal">><br>
bodywriting_ ul "animal" "sep": <<bodywriting_ ul "animal" "sep">><br>
bodywriting_ 를 "animal" "sep": <<bodywriting_ 를 "animal" "sep">><br>
creature_ rul "tentacle" : <<creature_ rul "tentacle">><br>
plants_plural_ i "daisy" : <<plants_plural_ i "daisy">><br>
<br><br>
<<customScriptTestroom "a", "b", "c">>
<br><br>
<</widget>>

:: customScriptTestroom [script]
function customScriptTestroom(arg1,arg2,arg3)
{
	let ret = "customScriptTestroom:";
//	let conjunction;
//	let test = ["수박", "사과", "귤", "딸기"];
//	try {if (1)  conjunction = (conjunction === "그리고"?["과", "와", "과"]:["이나", "나", "이나"])[getPostNum(test[test.length-2])]; conjunction += " "; getPostNum(test[test.length-1]);	/* useOxfordComma가 false일 때는 조사처리, 아니면 conjunction 사용. 끝으로 출력후의 조사처리를 위해 마지막 글자의 _postNum을 계산해둔다 */} catch(e) { return `<span class='red'>에러: formatList: ${e}: typeof(test)=${typeof(test)}${Array.isArray(test)?"= "+test.toString():""}</span>`}
//	ret += test[test.length-2]+conjunction + test[test.length-1]+", postNum=" + T.postNum;
	ret += {"pregnancy":"임신하기","mixed":"임신하기와 임신시키기","impregnation":"임신시키기"}["mixed"];

	return ret;
}
DefineMacroS("customScriptTestroom",customScriptTestroom);

function l10ntest()
{
	let keys = Object.keys(l10nStrings);
	let result = "";
	keys.forEach((key) => {
		result += "l10nStrings." + key + " = \"" + l10nStrings[key] + "\";<br>";
	}
	);
	return result;
}
DefineMacroS("l10ntest",l10ntest);

:: custom Testroom [nobr exitCheckBypass]
테스트 룸
<br>
<<print koTrans.info>>
<br>
navigator.userAgent=<<print navigator.userAgent>><br><br>
<<if $money lt 20000000>>
	<<moneyGain 200000>>를 얻었다!
<</if>>
<br><br>
[[Adult Shop]]
<br>
<!--<<l10ntest>>-->
Robert: <<trNPCdesc "Robert" "가">>_trResult<br>
Robert the inmate: <<trNPCdesc "Robert the inmate" "가">>_trResult<br>
<br>
<<set _test to "소녀를">><<set _test to trChangePost(_test, "과")+" "+"소년을">><<trChangePost _test "으로">><<print _test>> <<print _trResult>><br>
<br>
riding crop : <<sextoyPost "riding crop" "을">><br>
flog : <<sextoyPost "flog" "을">><br>
<br>
<<getChildrenIds `{location: "home"}`>>
<<set _keys to Object.keys(_childrenIds)>>
<<set $childrenIds to _childrenIds[_keys.random()]>>
childrenNamesPost: <<childrenNamesPost _childrenIds "이">><br>
childrenNames_ ga: <<childrenNames_ ga _childrenIds>><br>
<br><br><<set _tooltip to `<<putpost "툴팁" "을">>`>><div class="item" @tooltip="_tooltip">툴팁 테스트</div>
<<outfitChecks>>
T.top.name : name = _top.name, trResult = <<topNamePost "을">><<run console.log(topNamePost("을"))>><br>
T.topUnder : name = _topUnder.name, trResult = <<topUnderNamePost "을">><<run console.log(topUnderNamePost("을"))>><br>
T.bottom : name = _bottom.name, trResult = <<bottomNamePost "을">><<run console.log(bottomNamePost("을"))>><br>
T.bottomUnder : name = _bottomUnder.name, trResult = <<bottomUnderNamePost "을">><<run console.log(bottomUnderNamePost("을"))>><br>
bottomsPost: <<bottomsPost "을">><br>
<<street6>><br>
<br>
<<npc Whitney>><<person1>>
<<script>>
T.test = trNpcClothes("lower", 0, "을");
<</script>>
T.test = <<print _test>>, trResult = <<trNpcClothes "lower" 0 "을">>_trResult<br><<endevent>>
<br>
[[Robin Trick Hall]]<br>
<<generatem1>><<person1>><<trNPCdesc $NPCList[0].fullDescription "이">>_trResult<br>
<<endevent>>
outfitPost = <<outfitPost "을">><br>
underoutfitPost = <<underoutfitPost "을">><br>
<<nudityPost "을">> 가린다.<<nudityPostend>><br>
<<livestock_horse>><br>
<br><br>
<<run wikifier("outfitPost", "을", "sep")>> trResult = _trResult, trPost = _trPost<br>
<br><br>
<<print formatList(
		["semen", "goo", "nectar"].filter(stuff => $player.bodyliquid["hair"][stuff] gte 1)
		.join(',').replace(/([^,]+)(,|$)/g, (match, p1, p2) => {return {"semen": "정액", "goo": "점액", "nectar": "꿀"}[p1] + p2}).split(','))
>><br>
<<print ()=>{ return {"pregnancy":"임신하기","mixed":"임신하기와 임신시키기","impregnation":"임신시키기"}["mixed"]; }>>
/*<<set $chef_avery to 1>>[[Chef Opening 6]]<br>*/
<br><br>
trTentacle "slimy tentacle": <<trTentacle "slimy tentacle">><br>
trTentacle "slim man's slimy tentacle": <<trTentacle "slim man's slimy tentacle">><br>
trVirginity "slimy tentacle": <<trVirginity "slimy tentacle">>_trResult<br>
trVirginity "slim man's slimy tentacle": <<trVirginity "slim man's slimy tentacle">>_trResult<br>
<<crimeParade>><br>
<<for _name range setup.NPCNameList>>
	_name : <<trNamedNPC _name>>_trResult<br>
<</for>>
<br><br>
[[Prison Intro Boat]]
<br><br>
<<customTips>>
<br><br>
의상 테스트: [[customTest clothes]]
<br><br>
[[customTest Get All Feats]] <span style="color:red;font-style:bold">!경고!: 도전과제 테스트용입니다. 세이브 파일, 도전과제와 게임의욕을 망칠 수 있습니다. 도전과제 리셋/세이브 삭제로만 되돌릴 수 있습니다.</span>
<br><br>
pregnancyTesting : <span id="preg-test"><<print ($pregnancyTesting ? "true":"false")>></span> <<link "change">><<set $pregnancyTesting to ($pregnancyTesting? false:true)>><<replace "#preg-test">><<print ($pregnancyTesting ? "true":"false")>><</replace>><</link>>
<br><br>
<<customTestroom>>
<br><br>
<<if $custom.test gt 10>>
    <<goto "custom Test1">>
<</if>>
123
[[custom Testroom]]
<br>
[[ScopedVarTest]]
<br>
[[Bedroom]]

:: custom Test1 [nobr exitCheckBypass]
abc
[[abcd|custom Testroom]]

:: customTest Get All Feats [exitCheckBypass]
	/*<<featsData>>*/
	<<for $_name, $_value range setup.feats>>

		<<if $feats.currentSave[$_name] is undefined>>
			<<set $feats.currentSave[$_name] to Date()>>
				<<print $_name>> earned.<br>
		<</if>>
	<</for>>
[[custom Testroom]]

:: customTest clothes [exitCheckBypass]
<<capture _slot, _cloth, _trait>>
	<h2>Clothes</h2><br>
	<<for _slot range setup.clothes_all_slots>>
		<b>Slot : _slot</b><br>
		<<for _cloth range setup.clothes[_slot]>>
			name: _cloth.name / trName: <<trClothes _slot _cloth.name "name">>_trResult
			<<if def _cloth.name_simple>>
				/ name_simple: _cloth.name_simple / trName_simple: <<trClothes _slot _cloth.name_simple "name">>_trResult
			<</if>>
			<br>
		<</for>>
		<br>
	<</for>>

	<br><br>
	<h2>Clothes Traits test</h2><br>
	<<set _traitsInThisShop = [...new Set(Object.keys(setup.clothes).flatMap(x => setup.clothes[x]).flatMap(x => x.type))]>>
	<<for _trait range _traitsInThisShop>>
				<span class="capitalize">_trait : <<trClothingTrait _trait>>_trResult</span><br>
	<</for>>
	<br>
<</capture>>
[[custom Testroom]]
